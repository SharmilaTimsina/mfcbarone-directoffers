/*
 * Created on 1 Sep 2017 ( Time 15:57:07 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.zeta.mobile.direct.offers.entities;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Persistent class for entity stored in table "subscriptions"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name = "subscriptions", catalog = "directoffers")
// Define named queries here
@NamedQueries({
		@NamedQuery(name = "SubscriptionsEntity.countAll", query = "SELECT COUNT(x) FROM SubscriptionsEntity x") })
public class SubscriptionsEntity implements Serializable {

	private static final long serialVersionUID = 1L;

	// ----------------------------------------------------------------------
	// ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
	// ----------------------------------------------------------------------
	@Id
	@Column(name = "id", nullable = false)
	private Integer id;

	// ----------------------------------------------------------------------
	// ENTITY DATA FIELDS
	// ----------------------------------------------------------------------
	@Column(name = "status", nullable = false)
	private String status;

	@Column(name = "externalId", length = 45)
	private String externalid;

	@Column(name = "paymentType", length = 45)
	private String paymenttype;

	@Column(name = "subscriptionPayStatus", nullable = false)
	private String subscriptionpaystatus;

	@Column(name = "accountId", nullable = false)
	private Integer accountid;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "nextRenewDate", nullable = false)
	private Date nextrenewdate;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "creationDate", nullable = false)
	private Date creationdate;

	@Column(name = "createdBy", nullable = false)
	private String createdby;

	// "impressionid" (column "impressionId") is not defined by itself because used
	// as FK in a link

	// ----------------------------------------------------------------------
	// ENTITY LINKS ( RELATIONSHIP )
	// ----------------------------------------------------------------------
	@ManyToOne
	@JoinColumn(name = "impressionId", referencedColumnName = "id")
	private ImpressionsEntity impressions;

	// ----------------------------------------------------------------------
	// CONSTRUCTOR(S)
	// ----------------------------------------------------------------------
	public SubscriptionsEntity() {
		super();
	}

	// ----------------------------------------------------------------------
	// GETTER & SETTER FOR THE KEY FIELD
	// ----------------------------------------------------------------------
	public void setId(Integer id) {
		this.id = id;
	}

	public Integer getId() {
		return this.id;
	}

	// ----------------------------------------------------------------------
	// GETTERS & SETTERS FOR FIELDS
	// ----------------------------------------------------------------------
	// --- DATABASE MAPPING : status ( TEXT )
	public void setStatus(String status) {
		this.status = status;
	}

	public String getStatus() {
		return this.status;
	}

	// --- DATABASE MAPPING : externalId ( VARCHAR )
	public void setExternalid(String externalid) {
		this.externalid = externalid;
	}

	public String getExternalid() {
		return this.externalid;
	}

	// --- DATABASE MAPPING : paymentType ( VARCHAR )
	public void setPaymenttype(String paymenttype) {
		this.paymenttype = paymenttype;
	}

	public String getPaymenttype() {
		return this.paymenttype;
	}

	// --- DATABASE MAPPING : subscriptionPayStatus ( TEXT )
	public void setSubscriptionpaystatus(String subscriptionpaystatus) {
		this.subscriptionpaystatus = subscriptionpaystatus;
	}

	public String getSubscriptionpaystatus() {
		return this.subscriptionpaystatus;
	}

	// --- DATABASE MAPPING : accountId ( INT )
	public void setAccountid(Integer accountid) {
		this.accountid = accountid;
	}

	public Integer getAccountid() {
		return this.accountid;
	}

	// --- DATABASE MAPPING : nextRenewDate ( TIMESTAMP )
	public void setNextrenewdate(Date nextrenewdate) {
		this.nextrenewdate = nextrenewdate;
	}

	public Date getNextrenewdate() {
		return this.nextrenewdate;
	}

	// --- DATABASE MAPPING : creationDate ( TIMESTAMP )
	public void setCreationdate(Date creationdate) {
		this.creationdate = creationdate;
	}

	public Date getCreationdate() {
		return this.creationdate;
	}

	// --- DATABASE MAPPING : createdBy ( TEXT )
	public void setCreatedby(String createdby) {
		this.createdby = createdby;
	}

	public String getCreatedby() {
		return this.createdby;
	}

	// ----------------------------------------------------------------------
	// GETTERS & SETTERS FOR LINKS
	// ----------------------------------------------------------------------
	public void setImpressions(ImpressionsEntity impressions) {
		this.impressions = impressions;
	}

	public ImpressionsEntity getImpressions() {
		return this.impressions;
	}

	// ----------------------------------------------------------------------
	// toString METHOD
	// ----------------------------------------------------------------------
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("[");
		sb.append(id);
		sb.append("]:");
		// attribute 'status' not usable (type = String Long Text)
		sb.append(externalid);
		sb.append("|");
		sb.append(paymenttype);
		// attribute 'subscriptionpaystatus' not usable (type = String Long Text)
		sb.append("|");
		sb.append(accountid);
		sb.append("|");
		sb.append(nextrenewdate);
		sb.append("|");
		sb.append(creationdate);
		// attribute 'createdby' not usable (type = String Long Text)
		return sb.toString();
	}

}
