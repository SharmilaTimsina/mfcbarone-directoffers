/*
 * Created on 1 Sep 2017 ( Time 15:57:07 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.zeta.mobile.direct.offers.entities;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "countries"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="countries", catalog="directoffers" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="CountriesEntity.countAll", query="SELECT COUNT(x) FROM CountriesEntity x" )
} )
public class CountriesEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="name", nullable=false)
    private String     name         ;

    @Column(name="isoName", nullable=false)
    private String     isoname      ;

    @Column(name="region", nullable=false)
    private String     region       ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany(mappedBy="countries", targetEntity=CarriersEntity.class)
    private List<CarriersEntity> listOfCarriers;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public CountriesEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : name ( TEXT ) 
    public void setName( String name ) {
        this.name = name;
    }
    public String getName() {
        return this.name;
    }

    //--- DATABASE MAPPING : isoName ( TEXT ) 
    public void setIsoname( String isoname ) {
        this.isoname = isoname;
    }
    public String getIsoname() {
        return this.isoname;
    }

    //--- DATABASE MAPPING : region ( TEXT ) 
    public void setRegion( String region ) {
        this.region = region;
    }
    public String getRegion() {
        return this.region;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfCarriers( List<CarriersEntity> listOfCarriers ) {
        this.listOfCarriers = listOfCarriers;
    }
    public List<CarriersEntity> getListOfCarriers() {
        return this.listOfCarriers;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        // attribute 'name' not usable (type = String Long Text)
        // attribute 'isoname' not usable (type = String Long Text)
        // attribute 'region' not usable (type = String Long Text)
        return sb.toString(); 
    } 

}
