/*
 * Created on 1 Sep 2017 ( Time 15:57:06 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a composite Primary Key  


package com.zeta.mobile.direct.offers.entities;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;


import javax.persistence.*;

/**
 * Persistent class for entity stored in table "carriers"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="carriers", catalog="directoffers" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="CarriersEntity.countAll", query="SELECT COUNT(x) FROM CarriersEntity x" )
} )
public class CarriersEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
	@EmbeddedId
    private CarriersEntityKey compositePrimaryKey ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="networkCode", nullable=false)
    private Integer    networkcode  ;

    @Column(name="name")
    private String     name         ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="countryCode", referencedColumnName="id", insertable=false, updatable=false)
    private CountriesEntity countries   ;

    @ManyToOne
    @JoinColumn(name="connectionId", referencedColumnName="id", insertable=false, updatable=false)
    private ConnectionsEntity connections ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public CarriersEntity() {
		super();
		this.compositePrimaryKey = new CarriersEntityKey();       
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.compositePrimaryKey.setId( id ) ;
    }
    public Integer getId() {
        return this.compositePrimaryKey.getId() ;
    }
    public void setConnectionid( Integer connectionid ) {
        this.compositePrimaryKey.setConnectionid( connectionid ) ;
    }
    public Integer getConnectionid() {
        return this.compositePrimaryKey.getConnectionid() ;
    }
    public void setCountrycode( Integer countrycode ) {
        this.compositePrimaryKey.setCountrycode( countrycode ) ;
    }
    public Integer getCountrycode() {
        return this.compositePrimaryKey.getCountrycode() ;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : networkCode ( INT ) 
    public void setNetworkcode( Integer networkcode ) {
        this.networkcode = networkcode;
    }
    public Integer getNetworkcode() {
        return this.networkcode;
    }

    //--- DATABASE MAPPING : name ( TEXT ) 
    public void setName( String name ) {
        this.name = name;
    }
    public String getName() {
        return this.name;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setCountries( CountriesEntity countries ) {
        this.countries = countries;
    }
    public CountriesEntity getCountries() {
        return this.countries;
    }

    public void setConnections( ConnectionsEntity connections ) {
        this.connections = connections;
    }
    public ConnectionsEntity getConnections() {
        return this.connections;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        if ( compositePrimaryKey != null ) {  
            sb.append(compositePrimaryKey.toString());  
        }  
        else {  
            sb.append( "(null-key)" ); 
        }  
        sb.append("]:"); 
        sb.append(networkcode);
        // attribute 'name' not usable (type = String Long Text)
        return sb.toString(); 
    } 

}
